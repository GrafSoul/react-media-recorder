{"version":3,"sources":["MediaRecorder/AudioMeter/AudioMeter.js","MediaRecorder/ListRecords/ListRecords.js","MediaRecorder/MediaRecorder.js","App.js","reportWebVitals.js","index.js"],"names":["AudioMeter","audioContext","useRef","canvasContext","canvasMeter","mediaStreamSource","meter","rafID","gotStream","stream","current","createMediaStreamSource","clipLevel","averaging","clipLag","processor","createScriptProcessor","onaudioprocess","volumeAudioProcess","clipping","lastClip","volume","connect","destination","checkClipping","this","window","performance","now","shutdown","disconnect","createAudioMeter","drawLoop","clearRect","fillStyle","fillRect","requestAnimationFrame","event","x","buf","inputBuffer","getChannelData","bufLength","length","sum","i","Math","abs","rms","sqrt","max","useEffect","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","getContext","AudioContext","webkitAudioContext","audio","mandatory","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","optional","alert","e","className","id","height","ref","ListRecords","list","deleteEntry","map","item","index","onClick","MediaRecorder","videoElement","audioInputSelect","audioOutputSelect","videoSelect","constraints","recorder","chunks","useState","listItems","setListItems","onlyAudio","setOnlyAudio","isVideo","setIsVideo","isRecord","setIsRecord","isStart","setIsStart","count","setCount","selectors","disabled","HTMLMediaElement","prototype","gotDevices","deviceInfos","values","select","value","forEach","firstChild","removeChild","deviceInfo","option","document","createElement","deviceId","kind","text","label","appendChild","console","log","selectorIndex","Array","slice","call","childNodes","some","n","handleError","error","handlerOnlyAudio","message","name","mediaDevices","enumerateDevices","then","catch","start","audioSource","videoSource","exact","undefined","video","onchange","audioDestination","attachSinkId","element","sinkId","setSinkId","errorMessage","selectedIndex","warn","srcObject","handlerStartRecording","onChange","target","handleSetOnlyAudio","type","defaultChecked","htmlFor","join","poster","autoPlay","playsInline","stop","ondataavailable","push","data","state","blob","Blob","url","URL","createObjectURL","currentCount","currentRecord","controls","src","href","download","currentList","recordToList","newList","splice","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b3b505b7.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\nexport default function AudioMeter() {\r\n    const audioContext = useRef(null);\r\n    const canvasContext = useRef(null);\r\n    const canvasMeter = useRef(null);\r\n    const mediaStreamSource = useRef(null);\r\n    const meter = useRef(null);\r\n    const rafID = useRef(null);\r\n    let WIDTH = 400;\r\n    let HEIGHT = 10;\r\n\r\n    useEffect(() => {\r\n        navigator.getUserMedia =\r\n            navigator.getUserMedia ||\r\n            navigator.webkitGetUserMedia ||\r\n            navigator.mozGetUserMedia;\r\n\r\n        canvasMeter.current = canvasContext.current.getContext('2d');\r\n\r\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n        audioContext.current = new AudioContext();\r\n\r\n        try {\r\n            navigator.getUserMedia(\r\n                {\r\n                    audio: {\r\n                        mandatory: {\r\n                            googEchoCancellation: 'false',\r\n                            googAutoGainControl: 'false',\r\n                            googNoiseSuppression: 'false',\r\n                            googHighpassFilter: 'false',\r\n                        },\r\n                        optional: [],\r\n                    },\r\n                },\r\n                gotStream,\r\n                didntGetStream,\r\n            );\r\n        } catch (e) {\r\n            alert('getUserMedia threw exception :' + e);\r\n        }\r\n\r\n        function didntGetStream() {\r\n            alert('Stream generation failed.');\r\n        }\r\n    });\r\n\r\n    function gotStream(stream) {\r\n        mediaStreamSource.current = audioContext.current.createMediaStreamSource(\r\n            stream,\r\n        );\r\n        meter.current = createAudioMeter(audioContext.current);\r\n        mediaStreamSource.current.connect(meter.current);\r\n\r\n        drawLoop();\r\n    }\r\n\r\n    function drawLoop() {\r\n        canvasMeter.current.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n        if (meter.current.checkClipping()) {\r\n            canvasMeter.current.fillStyle = 'red';\r\n        } else {\r\n            canvasMeter.current.fillStyle = 'green';\r\n        }\r\n\r\n        canvasMeter.current.fillRect(\r\n            0,\r\n            0,\r\n            meter.current.volume * WIDTH * 1.4,\r\n            HEIGHT,\r\n        );\r\n\r\n        rafID.current = window.requestAnimationFrame(drawLoop);\r\n        return rafID.current;\r\n    }\r\n\r\n    function createAudioMeter(audioContext, clipLevel, averaging, clipLag) {\r\n        var processor = audioContext.createScriptProcessor(256);\r\n\r\n        processor.onaudioprocess = volumeAudioProcess;\r\n        processor.clipping = false;\r\n        processor.lastClip = 0;\r\n        processor.volume = 0;\r\n        processor.clipLevel = clipLevel || 0.98;\r\n        processor.averaging = averaging || 0.95;\r\n        processor.clipLag = clipLag || 750;\r\n\r\n        processor.connect(audioContext.destination);\r\n\r\n        processor.checkClipping = function () {\r\n            if (!this.clipping) return false;\r\n            if (this.lastClip + this.clipLag < window.performance.now())\r\n                this.clipping = false;\r\n            return this.clipping;\r\n        };\r\n\r\n        processor.shutdown = function () {\r\n            this.disconnect();\r\n            this.onaudioprocess = null;\r\n        };\r\n\r\n        return processor;\r\n    }\r\n\r\n    function volumeAudioProcess(event) {\r\n        const buf = event.inputBuffer.getChannelData(0);\r\n        let bufLength = buf.length;\r\n        let sum = 0;\r\n        let x;\r\n\r\n        for (let i = 0; i < bufLength; i++) {\r\n            x = buf[i];\r\n            if (Math.abs(x) >= this.clipLevel) {\r\n                this.clipping = true;\r\n                this.lastClip = window.performance.now();\r\n            }\r\n            sum += x * x;\r\n        }\r\n\r\n        let rms = Math.sqrt(sum / bufLength);\r\n        this.volume = Math.max(rms, this.volume * this.averaging);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <canvas\r\n                className=\"audio-indicator\"\r\n                id=\"meter\"\r\n                height=\"10\"\r\n                ref={canvasContext}\r\n            ></canvas>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nconst ListRecords = ({ list, deleteEntry }) => {\r\n    return (\r\n        <ul className=\"list-media\">\r\n            {list.map((item, index) => {\r\n                return (\r\n                    <li key={index}>\r\n                        {item}\r\n                        <button\r\n                            className=\"btn btn-danger\"\r\n                            onClick={() => deleteEntry(index)}\r\n                        >\r\n                            X\r\n                        </button>\r\n                    </li>\r\n                );\r\n                item;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ListRecords;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\n// eslint-disable-next-line\r\nimport adapter from 'webrtc-adapter';\r\n\r\nimport AudioMeter from './AudioMeter/AudioMeter';\r\nimport ListRecords from './ListRecords/ListRecords';\r\n\r\nimport './MediaRecorder.scss';\r\n\r\nconst MediaRecorder = () => {\r\n    const videoElement = useRef();\r\n    const audioInputSelect = useRef();\r\n    const audioOutputSelect = useRef();\r\n    const videoSelect = useRef();\r\n    const constraints = useRef();\r\n    const recorder = useRef(null);\r\n    const chunks = useRef([]);\r\n    // const listItems = useRef([]);\r\n\r\n    const [listItems, setListItems] = useState([]);\r\n    const [onlyAudio, setOnlyAudio] = useState(false);\r\n    const [isVideo, setIsVideo] = useState(true);\r\n    const [isRecord, setIsRecord] = useState(false);\r\n    const [isStart, setIsStart] = useState(false);\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const selectors = [\r\n            audioInputSelect.current,\r\n            audioOutputSelect.current,\r\n            videoSelect.current,\r\n        ];\r\n        audioOutputSelect.current.disabled = !(\r\n            'sinkId' in HTMLMediaElement.prototype\r\n        );\r\n\r\n        const gotDevices = (deviceInfos) => {\r\n            const values = selectors.map((select) => select.value);\r\n            selectors.forEach((select) => {\r\n                while (select.firstChild) {\r\n                    select.removeChild(select.firstChild);\r\n                }\r\n            });\r\n\r\n            for (let i = 0; i !== deviceInfos.length; ++i) {\r\n                const deviceInfo = deviceInfos[i];\r\n                const option = document.createElement('option');\r\n                option.value = deviceInfo.deviceId;\r\n                if (deviceInfo.kind === 'audioinput') {\r\n                    option.text =\r\n                        deviceInfo.label ||\r\n                        `microphone ${audioInputSelect.current.length + 1}`;\r\n                    audioInputSelect.current.appendChild(option);\r\n                } else if (deviceInfo.kind === 'audiooutput') {\r\n                    option.text =\r\n                        deviceInfo.label ||\r\n                        `speaker ${audioOutputSelect.current.length + 1}`;\r\n                    audioOutputSelect.current.appendChild(option);\r\n                } else if (deviceInfo.kind === 'videoinput') {\r\n                    option.text =\r\n                        deviceInfo.label ||\r\n                        `camera ${videoSelect.current.length + 1}`;\r\n                    videoSelect.current.appendChild(option);\r\n                } else {\r\n                    console.log(\r\n                        'Some other kind of source/device: ',\r\n                        deviceInfo,\r\n                    );\r\n                }\r\n            }\r\n\r\n            selectors.forEach((select, selectorIndex) => {\r\n                if (\r\n                    Array.prototype.slice\r\n                        .call(select.childNodes)\r\n                        .some((n) => n.value === values[selectorIndex])\r\n                ) {\r\n                    select.value = values[selectorIndex];\r\n                }\r\n            });\r\n        };\r\n\r\n        const handleError = (error) => {\r\n            handlerOnlyAudio();\r\n            console.log(\r\n                'navigator.MediaDevices.getUserMedia error: ',\r\n                error.message,\r\n                error.name,\r\n            );\r\n        };\r\n\r\n        navigator.mediaDevices\r\n            .enumerateDevices()\r\n            .then(gotDevices)\r\n            .catch(handleError);\r\n\r\n        const changeAudioDestination = () => {\r\n            const audioDestination = audioOutputSelect.current.value;\r\n            attachSinkId(videoElement.current, audioDestination);\r\n        };\r\n\r\n        const start = () => {\r\n            const audioSource = audioInputSelect.current.value;\r\n            const videoSource = videoSelect.current.value;\r\n\r\n            constraints.current = {\r\n                audio: {\r\n                    deviceId: audioSource ? { exact: audioSource } : undefined,\r\n                },\r\n                video: onlyAudio\r\n                    ? false\r\n                    : {\r\n                          deviceId: videoSource\r\n                              ? { exact: videoSource }\r\n                              : undefined,\r\n                      },\r\n            };\r\n\r\n            navigator.mediaDevices\r\n                .getUserMedia(constraints.current)\r\n                .then(gotStream)\r\n                .then(gotDevices)\r\n                .catch(handleError);\r\n        };\r\n\r\n        audioInputSelect.current.onchange = start;\r\n        audioOutputSelect.current.onchange = changeAudioDestination;\r\n\r\n        videoSelect.current.onchange = start;\r\n\r\n        start();\r\n    }, [onlyAudio]);\r\n\r\n    const attachSinkId = (element, sinkId) => {\r\n        if (typeof element.sinkId !== 'undefined') {\r\n            element\r\n                .setSinkId(sinkId)\r\n                .then(() => {\r\n                    console.log(\r\n                        `Success, audio output device attached: ${sinkId}`,\r\n                    );\r\n                })\r\n                .catch((error) => {\r\n                    let errorMessage = error;\r\n                    if (error.name === 'SecurityError') {\r\n                        errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\r\n                    }\r\n                    console.error(errorMessage);\r\n                    // Jump back to first output device in the list as it's the default.\r\n                    audioOutputSelect.current.selectedIndex = 0;\r\n                });\r\n        } else {\r\n            console.warn('Browser does not support output device selection.');\r\n        }\r\n    };\r\n\r\n    const gotStream = (stream) => {\r\n        videoElement.current.srcObject = stream;\r\n        recorder.current = new window.MediaRecorder(stream);\r\n        return navigator.mediaDevices.enumerateDevices();\r\n    };\r\n\r\n    const recordToList = () => {\r\n        let blob = new Blob(chunks.current, {\r\n            type: onlyAudio ? 'audio' : 'video',\r\n        });\r\n        let url = URL.createObjectURL(blob);\r\n        let currentCount = count + 1;\r\n        let currentRecord = !onlyAudio ? (\r\n            <span key={currentCount}>\r\n                {currentCount}.\r\n                <video controls>\r\n                    <source src={url} type=\"video/webm\" />\r\n                </video>\r\n                <a\r\n                    className=\"btn btn-info\"\r\n                    href={url}\r\n                    download={`${currentCount}.mp4`}\r\n                >\r\n                    Download - {currentCount}.mp4\r\n                </a>\r\n            </span>\r\n        ) : (\r\n            <span key={currentCount}>\r\n                {currentCount}.\r\n                <audio controls>\r\n                    <source src={url} type=\"audio/mp3\" />\r\n                </audio>\r\n                <a\r\n                    className=\"btn btn-info\"\r\n                    href={url}\r\n                    download={`${currentCount}.mp3`}\r\n                >\r\n                    Download - {currentCount}.mp3\r\n                </a>\r\n            </span>\r\n        );\r\n\r\n        let currentList = listItems;\r\n        currentList.push(currentRecord);\r\n        setListItems(currentList);\r\n        setCount(count + 1);\r\n    };\r\n\r\n    const handlerRecordStream = () => {\r\n        recorder.current.start();\r\n        setIsRecord(true);\r\n    };\r\n\r\n    const handlerRecordStop = () => {\r\n        recorder.current.stop();\r\n        recorder.current.ondataavailable = (e) => {\r\n            chunks.current = [];\r\n            chunks.current.push(e.data);\r\n            if (recorder.current.state === 'inactive') recordToList();\r\n        };\r\n        setIsRecord(false);\r\n    };\r\n\r\n    const handlerOnlyAudio = () => {\r\n        setIsVideo(false);\r\n        setOnlyAudio(true);\r\n    };\r\n\r\n    const handlerStartRecording = () => {\r\n        setIsStart(!isStart);\r\n    };\r\n\r\n    const handlerDeleteEntry = (index) => {\r\n        let newList = listItems;\r\n        newList.splice(index, 1);\r\n        setListItems(newList);\r\n        setCount(count - 1);\r\n    };\r\n\r\n    const handleSetOnlyAudio = (e) => {\r\n        e.target.value === 'audio' ? setOnlyAudio(true) : setOnlyAudio(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"header-content\">\r\n                <h1>Media Recorder</h1>\r\n                <h2>\r\n                    Configure your {onlyAudio ? null : 'camera and '} audio\r\n                    devices\r\n                </h2>\r\n            </div>\r\n            <div className=\"control-wrap\">\r\n                {isVideo && (\r\n                    <div className={isStart ? 'invisible' : null}>\r\n                        <div className=\"select-title\">\r\n                            Selecting a record type\r\n                        </div>\r\n\r\n                        <div\r\n                            className=\"control\"\r\n                            onChange={(e) => handleSetOnlyAudio(e)}\r\n                        >\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"media\"\r\n                                value=\"video\"\r\n                                id=\"mediaVideo\"\r\n                                defaultChecked={!onlyAudio}\r\n                            />\r\n                            <label htmlFor=\"media\">Video</label>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"media\"\r\n                                value=\"audio\"\r\n                                defaultChecked={onlyAudio}\r\n                            />\r\n                            <label htmlFor=\"media\">Audio</label>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"settings\">\r\n                    <div\r\n                        className={[\r\n                            'video-settings',\r\n                            onlyAudio ? 'invisible' : null,\r\n                        ].join(' ')}\r\n                    >\r\n                        <div className=\"video-content\">\r\n                            <video\r\n                                id=\"video\"\r\n                                poster=\"images/poster.png\"\r\n                                autoPlay\r\n                                playsInline\r\n                                ref={videoElement}\r\n                            ></video>\r\n                        </div>\r\n\r\n                        <div\r\n                            className={[\r\n                                'select',\r\n                                isStart ? 'invisible' : null,\r\n                            ].join(' ')}\r\n                        >\r\n                            <label htmlFor=\"videoSource\">Video source:</label>\r\n                            <select id=\"videoSource\" ref={videoSelect}></select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        className={[\r\n                            'audio-settings',\r\n                            isStart ? 'invisible' : null,\r\n                        ].join(' ')}\r\n                    >\r\n                        <div className=\"select\">\r\n                            <label htmlFor=\"audioSource\">Audio input:</label>\r\n                            <AudioMeter />\r\n                            <select\r\n                                id=\"audioSource\"\r\n                                ref={audioInputSelect}\r\n                            ></select>\r\n                        </div>\r\n\r\n                        <div className=\"select\">\r\n                            <label htmlFor=\"audioOutput\">Audio output:</label>\r\n                            <select\r\n                                id=\"audioOutput\"\r\n                                ref={audioOutputSelect}\r\n                            ></select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {isStart ? (\r\n                <div className=\"record-btns\">\r\n                    <button\r\n                        disabled={isRecord ? true : false}\r\n                        className={[\r\n                            'btn',\r\n                            'btn-success',\r\n                            isRecord ? 'active' : null,\r\n                        ].join(' ')}\r\n                        onClick={handlerRecordStream}\r\n                    >\r\n                        Record\r\n                    </button>\r\n                    <button\r\n                        disabled={isRecord ? false : true}\r\n                        className=\"btn btn-info\"\r\n                        onClick={handlerRecordStop}\r\n                    >\r\n                        Stop\r\n                    </button>\r\n                    <button\r\n                        disabled={!isRecord ? false : true}\r\n                        className=\"btn btn-info\"\r\n                        onClick={handlerStartRecording}\r\n                    >\r\n                        Settings\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <div className=\"record-btns\">\r\n                    <button\r\n                        className=\"btn btn-info\"\r\n                        onClick={handlerStartRecording}\r\n                    >\r\n                        Start Recording\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"footer-content\">\r\n                <h2>List of media records ({count})</h2>\r\n                <ListRecords\r\n                    list={listItems}\r\n                    deleteEntry={handlerDeleteEntry}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MediaRecorder;\r\n","import MediaRecorder from './MediaRecorder/MediaRecorder';\r\n\r\nfunction App() {\r\n    return <MediaRecorder />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}